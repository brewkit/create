#!/usr/bin/env node

'use strict';

const process = require('process');
const fs = require('fs-extra');
const { exec } = require('child_process');
const chalk = require('chalk');
const logUpdate = require('log-update');
const inquirer = require('inquirer');


/**
 * Configuration
 */
const destinationToCopyTo = process.cwd();
const scaffoldingDirectory = `${__dirname}/scaffolding`;


/**
 * Set up our loading icons
 */
const frames = ['üåë', 'üåò', 'üåó', 'üåñ', 'üåï', 'üåî', 'üåì', 'üåí'];
let i = 0;
let frame = frames[0];


/**
 * Brewkit splash
 */
console.log();
console.log(chalk.white('  ‚ñà') + '‚ñì‚ñü‚ñì‚ñõ‚ñì' + chalk.white('‚ñà') + '                                  ' + chalk.white('‚ñà') + '‚ñì‚ñü‚ñì‚ñì‚ñì' + chalk.white('‚ñà'));
console.log(chalk.white('‚ñÑ‚ñÄ‚ñà') + chalk.yellow('‚ñë‚ñÄ‚ñë‚ñÄ‚ñë' + chalk.white('‚ñà')) + '  ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ  '  + chalk.white('‚ñà') + chalk.yellow('‚ñë‚ñÄ‚ñë‚ñë‚ñë' + chalk.white('‚ñà‚ñÄ‚ñÑ')));
console.log(chalk.white('‚ñà ‚ñà' + chalk.yellow('‚ñë‚ñÄ‚ñë‚ñë‚ñë' + chalk.white('‚ñà'))) + '  ‚îÇ  Creating ' + chalk.blue('Brewkit') + ' Project  ‚îÇ  ' + chalk.white('‚ñà' + chalk.yellow('‚ñë‚ñë‚ñÄ‚ñë‚ñë' + chalk.white('‚ñà ‚ñà'))));
console.log(chalk.white('‚ñÄ‚ñÑ‚ñà') + chalk.yellow('‚ñë‚ñë‚ñë‚ñÄ‚ñë' + chalk.white('‚ñà')) + '  ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ  ' + chalk.white('‚ñà') + chalk.yellow('‚ñë‚ñÄ‚ñë‚ñÄ‚ñë') + chalk.white('‚ñà‚ñÑ‚ñÄ'));
console.log(chalk.white('  ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ') + '                                  ' + chalk.white('‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ'));
console.log();


inquirer
    .prompt([
        {
            type: 'input',
            name: 'projectName',
            message: 'Project Name:',
            prefix: chalk.blue('?'),
            validate: input => input.length > 0 || 'Please specify a project name.',
        }
    ])
    .then(answers => {
        fs.copySync(
            scaffoldingDirectory,
            destinationToCopyTo,
            {
                overwrite: false,
                errorOnExist: true,
            }
        );
        logUpdate(chalk.blue('‚î£‚îÅ ‚úÖ  ') + chalk.green('Copied scaffolding.'));
        logUpdate.done();

        insertProjectName(answers.projectName);

        let interval = setInterval(() => {
            frame = frames[i = ++i % frames.length];
            logUpdate(chalk.blue(`‚îó‚îÅ ${frame} ` + chalk.cyan('Installing packages...')));
        }, 100);

        exec('npm i && npm i --save @brewkit/components @brewkit/loader', () => {
            clearInterval(interval);
            logUpdate(chalk.blue('‚îó‚îÅ ‚úÖ  ') + chalk.green('Installed packages.'));
            logUpdate.done();
            console.log();
            logUpdate(chalk.blue('You\'re all set! üç∫~(Àá‚ó°Àá·É¶)'));
            logUpdate.done();
        });
    });


/**
 * Insert the value for projectName into placeholders within scaffolding
 */
function insertProjectName(projectName) {

    const fileToModify = destinationToCopyTo + '/app/src/index.html';

    fs.readFile(fileToModify, 'utf8', function (err,data) {
        if (err) return console.log(err);

        const result = data.replace(/{{projectName}}/g, projectName);

        fs.writeFile(fileToModify, result, 'utf8', function (err) {
            if (err) return console.log(err);
        });
    });

}